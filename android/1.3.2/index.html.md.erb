---
title: Android Push Client SDK
---

## <a id="version"></a> Version ##

This document covers the Android Push Client SDK v1.3.2.

Old documentation:

* [Version 1.3.1](../1.3.1/index.html)
* [Version 1.3.0](../1.3.0/index.html)
* [Version 1.0.4](../1.0.4/index.html)

## <a id="features"></a> Features ##

The Android Push Client SDK is a light-weight library that will help your application:

1. Register for push notifications with Google Cloud Messaging (GCM) and an instance of the [Pivotal Cloud Foundry Mobile Services](https://network.pivotal.io/products/pcf-mobile-services) Push Notification Server.

1. Receive push messages sent via the same frameworks.

## <a id="device_requirements"></a> Device Requirements ##

The Push SDK requires **Android API level 14** or greater.

The **Google Play Services** application must be installed on the device before you can register your device or receive push messages. Typically, the user will need to be logged into a Google account as well. Most devices should already have
this application installed, but some odd ones may not. You should be able to receive push notifications on a Android emulated
device if it has the **Google APIs** installed.

## <a id="getting_started"></a> Getting Started ##

In order to receive push messages from the PCF Push Notification Service
in your Android application, you will need to create a project within
the Google Developers Console.  Refer to [instructions below](#google).


### Step 2 - PCF Push Notification Service Dashboard ###

Set up your application and an **Android platform** on the PCF Services Push Notification Service Dashboard. This task
is beyond the scope of this document, but please note that you will need the two parameters (Project Number and API Key)
from Google Cloud Console above. After setting up your Android platform in PCF Mobile Services, make sure to note the
**Platform UUID** and **Platform Secret** parameters. You will need them below.  At this time, the Android push software
makes no distinction between developer and production modes.

You can find steps on how to create your application and platforms on PCF Mobile Services Push Dashboard notes:
[Push Dashboard Document](./../../dashboard-user-guide.html)

### Step 3 - Link to PCF Push SDK ###

Download the PCF Mobile Service Push Client SDK for Android from [Pivotal Network]
(https://network.pivotal.io/products/p-push-notifications).  The Client SDK is delivered as an Android Library
(i.e.: an "AAR" file). Copy the AAR file into the `libs` directory of your project and ensure that the following line
line is in the `dependencies` section of your module-level `build.gradle` file:

```groovy
    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }
```

Additionally, add the following dependency to the `dependencies` section of your module-level `build.gradle` file:

```groovy
    dependencies {
        compile(name:'PCFPush-1.3.2', ext:'aar')
        compile 'com.google.code.gson:gson:2.3'
        compile 'com.google.android.gms:play-services-location:7.5.0'
        compile 'com.google.android.gms:play-services-gcm:7.5.0'
        compile 'com.android.support:support-annotations:22.2.0'
    }
```

### Step 4 - Set up your AndroidManifest.xml file ###

You will need to define and use the following `permission` element in the `manifest` element of your application's
`AndroidManifest.xml` file. Ensure that the base of the **permission name** is your application's **package name**:

```xml
    <permission
        android:name="[YOUR.PACKAGE.NAME].permission.C2D_MESSAGE"
        android:protectionLevel="signature" />

    <uses-permission android:name="[YOUR.PACKAGE.NAME].permission.C2D_MESSAGE" />
```

You will need to add the following `receiver` to the `application` element of your application's `AndroidManifest.xml`
file. Ensure that you set the **category name** to your application's **package name**:

```xml
    <receiver
        android:name="io.pivotal.android.push.receiver.GcmBroadcastReceiver" android:permission="com.google.android.c2dm.permission.SEND">
        <intent-filter>
            <action android:name="com.google.android.c2dm.intent.RECEIVE"/>
            <category android:name="[YOUR.PACKAGE.NAME]"/>
        </intent-filter>
    </receiver>
```

### Step 5 - Set up your pivotal.properties file ###

Create a **pivotal.properties** file in your project's `src/main/assets` or `src/main/res/raw` directory. The following properties are required:

   Property                                 | Type   | Required | Description
   ---                                      | ---    | ---      | ---
   pivotal.push.serviceUrl                  | String | YES      | The URL of the PCF Push Server.
   pivotal.push.platformUuid                | String | YES      | The platform UUID of your push platform on the PCF Push server.
   pivotal.push.platformSecret              | String | YES      | The platform secret of your push platform on the PCF Push server.
   pivotal.push.gcmSenderId                 | String | YES      | The project number assigned by Google Cloud Console.
   pivotal.push.trustAllSslCertificates     | String | NO       | Set to `true` in order to ignore SSL certificate validation (**not safe in production!**).
   pivotal.push.pinnedSslCertificateNames   | Array  | NO       | A list of SSL certificates in the `DER` format stored in the application bundle that are used during pinned SSL authentication. The list is space separated.

   * None of the above values may be `null`.  None of the above values may be empty.

   * The `pivotal.push.platformUuid` and `pivotal.push.platformSecret` parameters should be
   the **platform UUID** and **secret** values from the Push Dashboard. These values may not be empty or `null`.

   * Order of SSL Authentication:
      1.  If `pivotal.push.trustAllSslCertificates` is set to `true` then all SSL certificates will be trusted implicitly.
      2.  If `pivotal.push.pinnedSslCertificateNames` is set and contains any items then 'pinned' SSL certification will be
          used.  Each entry in this space separated list is compared against the certificate on the remote server for authentication.
      3.  If neither of the above two parameters is set then the system default SSL authentication will be used (i.e.: the
          server's SSL certificate will be verified against a third-party certificate authority).

   * For instructions on how to convert your `PEM` certificate files to `DER` please see the [OpenSSL documentation](http://openssl.org/docs/apps/rsa.html).

### Step 6 - Initialize the Push SDK ###

Initialize the Push Client SDK. It is recommended that you initialize the Push Client SDK from any one of the following
places:

  * If your application has an `Application` subclass then you can initialize the Push Client SDK from its `onCreate`
  method. Make sure your class is declared in your **AndroidManifest.xml** file.

  * Otherwise, you should initialize the Push Client SDK in your application's primary `Activity` subclass' `onCreate`
  or `onResume` method.

Add the following lines of code to the initialization section of your application. You will need a `Context` object to
pass to the `getInstance` method, so you should try to add this code to your `Application` class or to one of your
`Activity` class.  In the example below the `Context` is the `this` object passed to the `getInstance` method (assuming
that we're in an Activity or Application.

```java
    try {
        // RegistrationListener is optional and may be `null`.
        Push.getInstance(this).startRegistration(DEVICE_ALIAS, TAGS, ARE_GEOFENCES_ENABLED, new RegistrationListener() {

            @Override
            public void onRegistrationComplete() {
                Log.i("MyLogTag", "Registration with PCF Push successful.");
            }

            @Override
            public void onRegistrationFailed(String reason) {
                Log.e("MyLogTag", "Registration with PCF Push failed: " + reason);
            }
        });
    } catch (Exception e) {
        Log.e("MyLogTag", "Registration with PCF Push failed: " + e);
    }
```

The **DEVICE_ALIAS** is a custom field that you can use to differentiate this device from others and is intended for
future use.  If you don't want to use the device alias then you can set this argument to `null` or an empty string.

The **TAGS** parameter is a `Set<String>` of tags that your application would like to subscribe to. There are many
possible uses of tags but they are dependent on your particular use cases. Always ensure that you provide all of the
tags that you'd like to be subscribed to; if you omit tags in future calls to the register method then the SDK will
think that you are trying to unsubscribe from those tags.  If there are no tags that you want to register to then you
can set this argument to `null`.

The **ARE_GEOFENCES_ENABLED** is a `boolean` value that turns the geofences feature on and off (described below).

You should only have to call `startRegistration` once in the lifetime of your process -- but calling it more times
is not harmful. The `startRegistration` method is asynchronous and will return before registration is complete. If you
need to know when registration is complete (or if it fails), then provide a `RegistrationListener` as the second argument.

### Step 7 - Receiving Push Notifications ###

To receive push notifications in your application you will need to add a custom `Service` to your application that
extends the `GcmService` provided in the SDK. The intent that GCM sends is passed to your service's `onReceiveMessage` method.
Here is a simple example:

```java
    public class MyPushService extends GcmService {

        @Override
        public void onReceiveMessage(Bundle payload) {
            if (payload.containsKey("message")) {
                final String message = payload.getString("message");
                handleMessage(message);
            }
        }

        private void handleMessage(String msg) {
            // Your code here. Display the message
            // on the device's bar as a notification.
        }
    }
```

Finally, you will need to declare your service in your **AndroidManifest.xml** file.

```xml
     <service android:name=".MyPushService" android:exported="false" />
```

## <a id="geofences"></a>  Geofences ##

Geofences are newly supported in version 1.3.0 of the Push Notification Service.  Using this service you will be able to
register push notifications that your app users will see when they enter or exit certain geographic regions that you
define on the Push Notification Service Dashboard.

In order to set up your app to receive geofence notifications please follow these steps.

### Step 1 - Set up your AndroidManifest.xml file ###

Add these two permissions to the `application` element of your **AndroidManifest.xml** file.

```xml
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
```

### Step 2 - Set up your Push Service ###

You will need to override the following two methods in your application's custom `Service` (see Step 7 above).

```java
    @Override
    public void onGeofenceEnter(Bundle payload) {
        Log.i("My Log Tag", "Entered geofence " + payload.getString("message"));
		    // Process geofence enter event
    }

    @Override
    public void onGeofenceExit(Bundle payload) {
        Log.i("My Log Tag", "Exited geofence " + payload.getString("message"));
		    // Process geofence exit event
    }
```

### Step 3 - Receive Geofence Status Updates (OPTIONAL) ###

The PCF Push Notification Service server will push updated geofences to user devices via push notifications.  You don't
need to do any more work to process these updates or monitor these geofences.  You can read the geofence status object
to find out if any problems occur during these background updates.  These errors can be reported directly to your
application if you create a `BroadcastReceiver` that listens to `io.pivotal.android.push.geofence.UPDATE` intents.

Example:

Create a class called `MyGeofenceUpdateBroadcastReceiver`:

```java
    public class MyGeofenceUpdateBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            final GeofenceStatus status = Push.getInstance(context).getGeofenceStatus(); // Read geofence status
            if (status != null) {
                if (status.isError()) {
                    Toast.makeText(context, status.getErrorReason(), Toast.LENGTH_LONG).show();
                }
                Toast.makeText(context, "Number of currently monitoring geofences: " + status.getNumberCurrentlyMonitoringGeofences(), Toast.LENGTH_LONG).show();
            }
        }
    }
```

You can configure your `BroadcastReceiver` class to listen to geofence updates by adding the following element in your
`AndroidManifest.xml`:

```xml
    <receiver
        android:name=".MyGeofenceUpdateBroadcastReceiver" android:exported="false" >
        <intent-filter>
            <action android:name="io.pivotal.android.push.geofence.UPDATE"/>
        </intent-filter>
    </receiver>
```

### Step 4 - Enable geofences ###

In order to enable geofences at runtime you will need to pass `true` to the `areGeofencesEnabled` argument when you call the
`startRegistration` method in your application main activity. If this parameter is set to `false` then no geofences features
will be available at runtime. Any geofences that may have been monitored before will be cleared and will no longer be
monitored.

## <a id="tags"></a> Tags ##

If any of your tags change during the lifetime of your process (e.g.: your application wants to change the list of
tags that it has subscribed to) then call `subscribeToTags` with your new set of parameters. Example:

```java
    // The SubscribeToTagsListener is optional and may be `null`.
    Push.getInstance(this).subscribeToTags(TAGS, new SubscribeToTagsListener() {
       @Override
       public void onSubscribeToTagsComplete() {
           Log.i("MyLogTag", "Successfully subscribed to tags with PCF Push.");
       }

       @Override
       public void onSubscribeToTagsFailed(String reason) {
           Log.e("MyLogTag", "Failed to subscribe to tags with PCF Push:" + reason);
       }
    });
```

## <a id="unregistration"></a> Unregistration ##

If you want to unregister from push notifications then you can call the `startUnregistration` method:

```java
    // The UnregistrationListener is optional and may be `null`.
    Push.getInstance(this).startUnregistration(new UnregistrationListener() {
        @Override
        public void onUnregistrationComplete() {
            Log.i("MyLogTag", "Successfully unregistered from PCF Push.");
        }

        @Override
        public void onUnregistrationFailed(String reason) {
            Log.e("MyLogTag", "Failed to unregister from PCF Push: " + reason);
        }
    });
```

## <a id="deviceUuid"></a> Reading the Device UUID ##

In order to target individual devices for remote notifications using the PCF Push Notification Service you will need to
target the Device UUID assigned to each device by the service. You can read the Device UUID at run time any time after a
successful registration with the service by calling the `getDeviceUuid` method. This method will return `null` if the
device is not currently registered with the PCF Push Notification Service.

Example:

```java
    Push.getInstance(this).startRegistration(deviceAlias, subscribedTags, areGeofencesEnabled, new RegistrationListener() {

        @Override
        public void onRegistrationComplete() {
            Log.i("MyLogTag", "Device Uuid: " + Push.getInstance(this).getDeviceUuid());
        }

        @Override
        public void onRegistrationFailed(String reason) {
            Log.e("MyLogTag", "Failed to unregister from PCF Push: " + reason);
        }
    });
```

## <a id="google"></a> Google Developers Console ##

1. Log into [Google Developers Console](https://console.developers.google.com/project).  You will need a Google account.

1. Click the `Create Project` button.

1. Enter a `Project Name` and leave the auto-generated `Project ID` field untouched.  Click the `Create` button.

1. Wait until the project is completed, this might take a couple of minutes.  Once this step is done you will be on the
   project page.

1. Note at the top your `Project Number`.  This value should be in light gray text.  Make note of this value as we will
   need it later. Make sure you use the numeric project number.  Do not use the project ID with the words.

1. On the left find the ***`APIs & Auth`*** section and click the `APIs` link.

1. In the `Browse APIs` textbox enter `Google Cloud Messaging` and ensure that `Google Cloud Messaging for Android` is
   enabled by clicking `Enable API`.

1. On the left click the `Credentials` link which is directly below the `APIs` link.

1. Find `Public API Access` on the page and click the `Create new Key` button below.  Click `Server key` when the dialog
   pops up.

1. In the textarea inside the dialog box enter `0.0.0.0/0` and click the `Create` button.

1. Make note of the `API KEY` value as you will need it later.

