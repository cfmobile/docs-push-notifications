---
title: Android Push Client SDK
---
#Version

This document covers the Android Push Client SDK v1.0.3.

#Features

The Android Push Client SDK is a light-weight library that will help your application:

1. Register for push notifications with Google Cloud Messaging (GCM) and an instance of the [Pivotal Cloud Foundry Mobile Services](https://network.pivotal.io/products/pcf-mobile-services) Push Notification Server.

1. Receive push messages sent via the same frameworks.

#Device Requirements

The Push SDK requires **Android API level 14** or greater.

The **Google Play Services** application must be installed on the device before you can register your device or receive push messages. Typically, the user will need to be logged into a Google account as well. Most devices should already have
this application installed, but some odd ones may not. You should be able to receive push notifications on a Android emulated
device if it has the **Google APIs** installed.

#Getting Started

In order to receive push messages from the PCF Push Notification Service in your Android application, you will need to follow
these steps:

1. Set up a project on [Google Developers Console](https://console.developers.google.com/project). Follow the instructions on the [Android Developer website](http://developer.android.com/google/gcm/gs.html).

   * You need obtain the **Project Number** (AKA the "Sender ID") of your project. Use the numeric Project Number, not the one with words. The Project Number
   is a parameter you must provide to the Push Client SDK when registering your device at run-time and to the	Pivotal
   CF Mobile Services Push Dashboard.

   * You will also need to create a new **Public API** on the **Credentials** screen.  Record the **API Key** string for use below.

1. Set up your application and an **Android platform** on the PCF Mobile Services Push Dashboard. This task is beyond the scope
   of this document, but please note that you will need the two parameters (Project Number and API Key) from Google Cloud Console above. After setting
   up your Android platform in PCF Mobile Services, make sure to note the **Platform UUID** and **Platform Secret** parameters. You
   will need them below.  At this time, the Android push software makes no distinction between developer and production modes.

1. Download the PCF Mobile Service Push Client SDK for Android from [Pivotal Network](https://network.pivotal.io/products/p-push-notifications).
   The Client SDK is delivered
   as an Android Library (i.e.: an "AAR" file). Copy the AAR file into the `libs` directory of your project and ensure
   that the following line line is in the `dependencies` section of your `build.gradle` file:

        compile fileTree(dir: 'libs', include: ['*.aar'])

1. You will need to define and use the following `permission` element in the `manifest` element of your application's
    `AndroidManifest.xml` file. Ensure that the base of the **permission name** is your application's **package name**:

        <permission
            android:name="[YOUR.PACKAGE.NAME].permission.C2D_MESSAGE"
            android:protectionLevel="signature" />

        <uses-permission android:name="[YOUR.PACKAGE.NAME].permission.C2D_MESSAGE" />

1. You will need to add the following `receiver` to the `application` element of your application's
    **AndroidManifest.xml** file. Ensure that you set the **category name** to your application's **package name**:

        <receiver
            android:name="io.pivotal.android.push.receiver.GcmBroadcastReceiver"
        android:permission="com.google.android.c2dm.permission.SEND">
            <intent-filter>
                <action android:name="com.google.android.c2dm.intent.RECEIVE"/>
                <category android:name="[YOUR.PACKAGE.NAME]"/>
            </intent-filter>
        </receiver>

1. Create a **pivotal.properties** file in your project's `src/main/assets` or `src/main/res/raw` directory. The following properties are required:

   Property                      | Type   | Description
   ---                           | ---    | ---
   pivotal.push.serviceUrl       | String | The URL of the PCF Push Server.
   pivotal.push.platformUuid     | String | The platform UUID of your push platform on the PCF Push server.
   pivotal.push.platformSecret   | String | The platform secret of your push platform on the PCF Push server.
   pivotal.push.gcmSenderId      | String | The project number assigned by Google Cloud Console.

   * None of the above values may be `null`.  None of the above values may be empty.

   * The `pivotal.push.platformUuid` and `pivotal.push.platformSecret` parameters should be
   the **platform UUID** and **secret** values from the Push Dashboard. These values may not be empty or `null`.

1. Initialize the Push Client SDK. It is recommended that you initialize the Push Client SDK from any one of the
   following places:

   * Your application's `Application` subclass' `onCreate` method. Make sure your class is declared in
     your **AndroidManifest.xml** file.

   * In your application's primary `Activity` subclass' `onCreate` or `onResume` method.

   Add the following lines of code to the initialization section of your application. You will need a `Context` object
   to pass to the `getInstance` method, so you should try to add this code to your `Application` class or to one of
   your `Activity` class.

        try {
            // RegistrationListener is optional and may be `null`.
            Push.getInstance(this).startRegistration(DEVICE_ALIAS, TAGS, new RegistrationListener() {

                @Override
                public void onRegistrationComplete() {
                    Log.i("MyLogTag", "Registration with PCF Push successful.");
                }

                @Override
                public void onRegistrationFailed(String reason) {
                    Log.e("MyLogTag", "Registration with PCF Push failed: " + reason);
                }
            });
        } catch (Exception e) {
            Log.e("MyLogTag", "Registration with PCF Push failed: " + e);
        }

   The **DEVICE_ALIAS** is a custom field that you can use to differentiate this device from others and is intended for
   future use.  If you don't want to use the device alias then you can set this argument to `null` or an empty string.

   The **TAGS** parameter is a `Set<String>` of tags that your application would like to subscribe to. There are many
   possible uses of tags but they are dependent on your particular use cases. Always ensure that you provide all of the
   tags that you'd like to be subscribed to; if you omit tags in future calls to the register method then the SDK will
   think that you are trying to unsubscribe from those tags.  If there are no tags that you want to register to then you
   can set this argument to `null`.

   You should only have to call `startRegistration` once in the lifetime of your process -- but calling it more times
   is not harmful. The `startRegistration` method is asynchronous and will return before registration is complete. If you
   need to know when registration is complete (or if it fails), then provide a `RegistrationListener` as the second argument.

1.  To receive push notifications in your application you will need to add a custom `Service` to your application that
    extends the `GcmService` provided in the SDK. The intent that GCM sends is passed to your service's `onReceiveMessage` method.
    Here is a simple example:

        public class MyPushService extends GcmService {

            @Override
            public void onReceiveMessage(Bundle payload) {
                if (payload.containsKey("message")) {
                    final String message = payload.getString("message");
                    handleMessage(message);
                }
            }

            private void handleMessage(String msg) {
                // Your code here. Display the message
                // on the device's bar as a notification.
            }
        }

1. Finally, you will need to declare your service in your **AndroidManifest.xml** file.

        <service android:name=".MyPushService" android:exported="false" />

# OPTIONAL

1. If any of your tags change during the lifetime of your process (e.g.: your application wants to change the list of
   tags that it has subscribed to) then call `subscribeToTags` with your new set of parameters. Example:

        // The SubscribeToTagsListener is optional and may be `null`.
        Push.getInstance(this).subscribeToTags(TAGS, new SubscribeToTagsListener() {
           @Override
           public void onSubscribeToTagsComplete() {
               Log.i("MyLogTag", "Successfully subscribed to tags with PCF Push.");
           }

           @Override
           public void onSubscribeToTagsFailed(String reason) {
               Log.e("MyLogTag", "Failed to subscribe to tags with PCF Push:" + reason);
           }
        });

1.  If you want to unregister from push notifications then you can call the `startUnregistration` method:

        // The UnregistrationListener is optional and may be `null`.
        Push.getInstance(this).startUnregistration(new UnregistrationListener() {
            @Override
            public void onUnregistrationComplete() {
                Log.i("MyLogTag", "Successfully unregistered from PCF Push.");
            }

            @Override
            public void onUnregistrationFailed(String reason) {
                Log.e("MyLogTag", "Failed to unregister from PCF Push: " + reason);
            }
        });
