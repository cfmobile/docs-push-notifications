---
title: Setting up Push Notifications with FCM
owner: Push Notifications
---

This document describes how developers can set up the Pivotal Cloud Foundry (PCF) Push Notification Service with the Firebase Cloud Messaging (FCM) platform so their apps can send push notifications to Android devices.

##<a id="pre"></a>Prerequisites

The procedures in this document require the following:

* You must have access to a PCF environment with the Push Notification Service installed.
* You must have Android Studio 2.2 or later installed on your machine.
* You must have the Google Repository from the [Android SDK Manager](https://developer.android.com/tools/help/sdk-manager.html).
* You must have the Push Android SDK 1.7 or later from [Github](https://github.com/cfmobile/push-android).
* The devices that you want to send push notifications to must run Android 2.3 (Gingerbread) or later.
* The devices that you want to send push notifications to must have Google Play Services 9.8.0 or later.

## <a id="prep"></a>Prepare an FCM Project

Follow these steps to prepare an FCM project for your app.

1. Navigate to the [Firebase Console](https://console.firebase.google.com/) and create an account if you do not have one already.
1. Once logged in, **Create** or **Import** a project you want to use with FCM.
	1. When prompted, click **Add Firebase to your Android app**.
	1. Enter a **Package name** that matches the ID of your app:
		* For the push-sample app, the ID is `io.pivotal.android.push.sample`.
		* For the push-demo app, the ID is `io.pivotal.android.push.demo`.
	1. Ensure the **Debug signing certificate SHA-1** matches the SHA-1 from your debug signing certificate. For instructions on how to get this fingerprint, refer to [Authenticating Your Client](https://developers.google.com/android/guides/client-auth) in the Google APIs for Android documentation.
	1. After you finish creating or importing your project, a `google-services.json` file downloads. Keep track of this file for later use.
1. Click your project.
1. Click the settings icon next to your project name and select **Project Settings**.
1. Select the **Cloud Messaging** tab.
1. Record the **Server key** for later use.

## <a id="push-service"></a> Configure Your Push Dashboard 

Follow the steps below to navigate to the Push dashboard and configure the Push Notification service.

You can navigate to the Push dashboard using either Apps Manager or the Cloud Foundry Command Line Interface (cf CLI). Use the cf CLI instructions if you did not enable the <b>Push Apps Manager</b> errand when deploying Pivotal Application Service.

### Navigate to Push Dashboard using Apps Manager

1. In a browser, navigate to `apps.YOUR-SYSTEM-DOMAIN`.

1. Select the **system** org and the **push-notifications** space.

1. Click the **Services** tab.

1. Select the **PCF Push Notification Service** row and click the **Manage** link.

### Navigate to Push Dashboard using cf CLI

1. Open a terminal window and log in:

	<pre class="terminal">$ cf login -a https://api.YOUR-SYSTEM-DOMAIN -u USERNAME -p PASSWORD</pre>

1. Target the correct org and space:

	<pre class="terminal">$ cf target -o system -s push-notifications</pre>

1. Run the following command:

	<pre class="terminal">$ cf service push-service-instance</pre>

1. Copy the URL from the **Dashboard** field and paste it into your browser.

### <a id="backend"></a>Configure the Push Notification Service

Follow these steps to configure the Push backend by creating a new platform for the sample app.

1. In the Push dashboard, select the **+** icon from the left to create a new app to send push notifications to, either the push sample app or push demo app.
	* Enter a **Name** and **Description**.
1. Once you create an app, select the **Configuration** tab for that app.
1. Click **Add New Platform**.
1. Enter a **Name** and **Description**, and choose a **Mode**.
1. For **Type**, select `Android-FCM`.
1. Once created,  click the pencil icon to edit the platform.
1. In the **Google Key** field, paste the server key that you recorded earlier.

<p class="note"><strong>Note</strong>: You can add multiple FCM Platforms with server keys from different FCM projects, depending on how your FCM applications and projects are organized. There is no requirement that all FCM Platforms use the same server key in the Push backend.</p>

## <a id="backend"></a>Run the App on Your Device

Follow these steps to compile and deploy the app on your Android device.

1. Navigate to the [Push Android Samples](https://github.com/cfmobile/push-android-samples) repository.
1. Clone the repository to your workspace.
1. Checkout the `release-v1.7.0` branch, or the branch of a later version.
1. Copy the `google-services.json` file from earlier into your app project:
	* If you want to compile the sample app, copy the `json` file to the `push-sample` subdirectory of the app project.
	* If you want to compile the demo app, copy the `json` file to the `push-demo` subdirectory.
1. Open a project in Android Studio using the repo you cloned.
1. Open the `pivotal.properties` file.
	* For the sample app, you can find this file in `push-sample/src/main/res/raw/`.
	* For the demo app, you can find this file in `push-demo/src/main/assets/`.
1. Update the file as follows:
	* `pivotal.push.platformUuid`: This value must match the platform **UUID** of the FCM Platform you created in the previous section.
	* `pivotal.push.platformSecret`: This value must match the platform **SECRET** of the FCM Platform you created in the previous step.
	* `pivotal.push.serviceUrl`: Enter the server address to your push backend API in the form of `https://push-api.YOUR-SYSTEM-DOMAIN`. For more information, see [API URL](./dashboard-user-guide.html#APIURL).
1. Compile and deploy the application to your Android device.

Once the application registers with the Push backend, it can receive push notifications. To verify that your device registered, see the **Devices** tab in the Push dashboard. The device **Type** field displays a Firebase logo.

You can also send test pushes to the device from the Push dashboard.

<p class="note"><strong>Note</strong>: If you send a test push to your device from the Push dashboard, ensure the app is not open on your device. You cannot see the test push while the app is open.</p>
